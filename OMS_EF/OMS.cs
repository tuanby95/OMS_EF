// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace OMS_EF
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<Channel> Channels { get; set; } // Channel
        DbSet<Country> Countries { get; set; } // Country
        DbSet<CountryVariant> CountryVariants { get; set; } // CountryVariant
        DbSet<DatabaseVersion> DatabaseVersions { get; set; } // DatabaseVersion
        DbSet<Feedback> Feedbacks { get; set; } // Feedback
        DbSet<OrderDetail> OrderDetails { get; set; } // OrderDetail
        DbSet<OrderInfo> OrderInfoes { get; set; } // OrderInfo
        DbSet<Payment> Payments { get; set; } // Payment
        DbSet<Product> Products { get; set; } // Product
        DbSet<ProductChannel> ProductChannels { get; set; } // ProductChannel
        DbSet<ProductImage> ProductImages { get; set; } // ProductImage
        DbSet<ProductVariant> ProductVariants { get; set; } // ProductVariant
        DbSet<ProductWarehouse> ProductWarehouses { get; set; } // ProductWarehouse
        DbSet<Provider> Providers { get; set; } // Provider
        DbSet<ReturnInfo> ReturnInfoes { get; set; } // ReturnInfo
        DbSet<UserInfo> UserInfoes { get; set; } // UserInfo
        DbSet<Variant> Variants { get; set; } // Variant
        DbSet<Voucher> Vouchers { get; set; } // Voucher
        DbSet<Warehouse> Warehouses { get; set; } // Warehouse

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);

        // Stored Procedures
        List<GetDateToDateTotalOrderReturnModel> GetDateToDateTotalOrder(int? backNumber, DateTime? fromDateInput, DateTime? toDateInput);
        List<GetDateToDateTotalOrderReturnModel> GetDateToDateTotalOrder(int? backNumber, DateTime? fromDateInput, DateTime? toDateInput, out int procResult);
        Task<List<GetDateToDateTotalOrderReturnModel>> GetDateToDateTotalOrderAsync(int? backNumber, DateTime? fromDateInput, DateTime? toDateInput);

        List<GetOrderByCountryReturnModel> GetOrderByCountry(DateTime? fromDate, DateTime? toDate);
        List<GetOrderByCountryReturnModel> GetOrderByCountry(DateTime? fromDate, DateTime? toDate, out int procResult);
        Task<List<GetOrderByCountryReturnModel>> GetOrderByCountryAsync(DateTime? fromDate, DateTime? toDate);

        List<GetOrderByStatusReturnModel> GetOrderByStatus(DateTime? fromDate, DateTime? toDate);
        List<GetOrderByStatusReturnModel> GetOrderByStatus(DateTime? fromDate, DateTime? toDate, out int procResult);
        Task<List<GetOrderByStatusReturnModel>> GetOrderByStatusAsync(DateTime? fromDate, DateTime? toDate);

        List<GetProductsByChannelReturnModel> GetProductsByChannel(int? channelId);
        List<GetProductsByChannelReturnModel> GetProductsByChannel(int? channelId, out int procResult);
        Task<List<GetProductsByChannelReturnModel>> GetProductsByChannelAsync(int? channelId);

        List<GetReturnOrdersReturnModel> GetReturnOrders(DateTime? currentDate, int? filterRange);
        List<GetReturnOrdersReturnModel> GetReturnOrders(DateTime? currentDate, int? filterRange, out int procResult);
        Task<List<GetReturnOrdersReturnModel>> GetReturnOrdersAsync(DateTime? currentDate, int? filterRange);

        List<GetTotalSaleByChannelReturnModel> GetTotalSaleByChannel(DateTime? fromDate, DateTime? toDate, double? backNumber);
        List<GetTotalSaleByChannelReturnModel> GetTotalSaleByChannel(DateTime? fromDate, DateTime? toDate, double? backNumber, out int procResult);
        Task<List<GetTotalSaleByChannelReturnModel>> GetTotalSaleByChannelAsync(DateTime? fromDate, DateTime? toDate, double? backNumber);

        List<GetTotalSaleOverviewReturnModel> GetTotalSaleOverview();
        List<GetTotalSaleOverviewReturnModel> GetTotalSaleOverview(out int procResult);
        Task<List<GetTotalSaleOverviewReturnModel>> GetTotalSaleOverviewAsync();

    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<Channel> Channels { get; set; } // Channel
        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<CountryVariant> CountryVariants { get; set; } // CountryVariant
        public DbSet<DatabaseVersion> DatabaseVersions { get; set; } // DatabaseVersion
        public DbSet<Feedback> Feedbacks { get; set; } // Feedback
        public DbSet<OrderDetail> OrderDetails { get; set; } // OrderDetail
        public DbSet<OrderInfo> OrderInfoes { get; set; } // OrderInfo
        public DbSet<Payment> Payments { get; set; } // Payment
        public DbSet<Product> Products { get; set; } // Product
        public DbSet<ProductChannel> ProductChannels { get; set; } // ProductChannel
        public DbSet<ProductImage> ProductImages { get; set; } // ProductImage
        public DbSet<ProductVariant> ProductVariants { get; set; } // ProductVariant
        public DbSet<ProductWarehouse> ProductWarehouses { get; set; } // ProductWarehouse
        public DbSet<Provider> Providers { get; set; } // Provider
        public DbSet<ReturnInfo> ReturnInfoes { get; set; } // ReturnInfo
        public DbSet<UserInfo> UserInfoes { get; set; } // UserInfo
        public DbSet<Variant> Variants { get; set; } // Variant
        public DbSet<Voucher> Vouchers { get; set; } // Voucher
        public DbSet<Warehouse> Warehouses { get; set; } // Warehouse

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(local);Initial Catalog=OMSDb;Integrated Security=True;MultipleActiveResultSets=True;Encrypt=false;TrustServerCertificate=true");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new ChannelConfiguration());
            modelBuilder.ApplyConfiguration(new CountryConfiguration());
            modelBuilder.ApplyConfiguration(new CountryVariantConfiguration());
            modelBuilder.ApplyConfiguration(new DatabaseVersionConfiguration());
            modelBuilder.ApplyConfiguration(new FeedbackConfiguration());
            modelBuilder.ApplyConfiguration(new OrderDetailConfiguration());
            modelBuilder.ApplyConfiguration(new OrderInfoConfiguration());
            modelBuilder.ApplyConfiguration(new PaymentConfiguration());
            modelBuilder.ApplyConfiguration(new ProductConfiguration());
            modelBuilder.ApplyConfiguration(new ProductChannelConfiguration());
            modelBuilder.ApplyConfiguration(new ProductImageConfiguration());
            modelBuilder.ApplyConfiguration(new ProductVariantConfiguration());
            modelBuilder.ApplyConfiguration(new ProductWarehouseConfiguration());
            modelBuilder.ApplyConfiguration(new ProviderConfiguration());
            modelBuilder.ApplyConfiguration(new ReturnInfoConfiguration());
            modelBuilder.ApplyConfiguration(new UserInfoConfiguration());
            modelBuilder.ApplyConfiguration(new VariantConfiguration());
            modelBuilder.ApplyConfiguration(new VoucherConfiguration());
            modelBuilder.ApplyConfiguration(new WarehouseConfiguration());

            modelBuilder.Entity<GetDateToDateTotalOrderReturnModel>().HasNoKey();
            modelBuilder.Entity<GetOrderByCountryReturnModel>().HasNoKey();
            modelBuilder.Entity<GetOrderByStatusReturnModel>().HasNoKey();
            modelBuilder.Entity<GetProductsByChannelReturnModel>().HasNoKey();
            modelBuilder.Entity<GetReturnOrdersReturnModel>().HasNoKey();
            modelBuilder.Entity<GetTotalSaleByChannelReturnModel>().HasNoKey();
            modelBuilder.Entity<GetTotalSaleOverviewReturnModel>().HasNoKey();
        }


        // Stored Procedures
        public List<GetDateToDateTotalOrderReturnModel> GetDateToDateTotalOrder(int? backNumber = null, DateTime? fromDateInput = null, DateTime? toDateInput = null)
        {
            int procResult;
            return GetDateToDateTotalOrder(backNumber, fromDateInput, toDateInput, out procResult);
        }

        public List<GetDateToDateTotalOrderReturnModel> GetDateToDateTotalOrder(int? backNumber, DateTime? fromDateInput, DateTime? toDateInput, out int procResult)
        {
            var backNumberParam = new SqlParameter { ParameterName = "@backNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = backNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!backNumber.HasValue)
                backNumberParam.Value = DBNull.Value;

            var fromDateInputParam = new SqlParameter { ParameterName = "@fromDateInput", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDateInput.GetValueOrDefault() };
            if (!fromDateInput.HasValue)
                fromDateInputParam.Value = DBNull.Value;

            var toDateInputParam = new SqlParameter { ParameterName = "@toDateInput", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDateInput.GetValueOrDefault() };
            if (!toDateInput.HasValue)
                toDateInputParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetDateToDateTotalOrder] @backNumber, @fromDateInput, @toDateInput";
            var procResultData = Set<GetDateToDateTotalOrderReturnModel>()
                .FromSqlRaw(sqlCommand, backNumberParam, fromDateInputParam, toDateInputParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetDateToDateTotalOrderReturnModel>> GetDateToDateTotalOrderAsync(int? backNumber = null, DateTime? fromDateInput = null, DateTime? toDateInput = null)
        {
            var backNumberParam = new SqlParameter { ParameterName = "@backNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = backNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!backNumber.HasValue)
                backNumberParam.Value = DBNull.Value;

            var fromDateInputParam = new SqlParameter { ParameterName = "@fromDateInput", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDateInput.GetValueOrDefault() };
            if (!fromDateInput.HasValue)
                fromDateInputParam.Value = DBNull.Value;

            var toDateInputParam = new SqlParameter { ParameterName = "@toDateInput", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDateInput.GetValueOrDefault() };
            if (!toDateInput.HasValue)
                toDateInputParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetDateToDateTotalOrder] @backNumber, @fromDateInput, @toDateInput";
            var procResultData = await Set<GetDateToDateTotalOrderReturnModel>()
                .FromSqlRaw(sqlCommand, backNumberParam, fromDateInputParam, toDateInputParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetOrderByCountryReturnModel> GetOrderByCountry(DateTime? fromDate = null, DateTime? toDate = null)
        {
            int procResult;
            return GetOrderByCountry(fromDate, toDate, out procResult);
        }

        public List<GetOrderByCountryReturnModel> GetOrderByCountry(DateTime? fromDate, DateTime? toDate, out int procResult)
        {
            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetOrderByCountry] @fromDate, @toDate";
            var procResultData = Set<GetOrderByCountryReturnModel>()
                .FromSqlRaw(sqlCommand, fromDateParam, toDateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetOrderByCountryReturnModel>> GetOrderByCountryAsync(DateTime? fromDate = null, DateTime? toDate = null)
        {
            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetOrderByCountry] @fromDate, @toDate";
            var procResultData = await Set<GetOrderByCountryReturnModel>()
                .FromSqlRaw(sqlCommand, fromDateParam, toDateParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetOrderByStatusReturnModel> GetOrderByStatus(DateTime? fromDate = null, DateTime? toDate = null)
        {
            int procResult;
            return GetOrderByStatus(fromDate, toDate, out procResult);
        }

        public List<GetOrderByStatusReturnModel> GetOrderByStatus(DateTime? fromDate, DateTime? toDate, out int procResult)
        {
            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetOrderByStatus] @fromDate, @toDate";
            var procResultData = Set<GetOrderByStatusReturnModel>()
                .FromSqlRaw(sqlCommand, fromDateParam, toDateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetOrderByStatusReturnModel>> GetOrderByStatusAsync(DateTime? fromDate = null, DateTime? toDate = null)
        {
            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetOrderByStatus] @fromDate, @toDate";
            var procResultData = await Set<GetOrderByStatusReturnModel>()
                .FromSqlRaw(sqlCommand, fromDateParam, toDateParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetProductsByChannelReturnModel> GetProductsByChannel(int? channelId = null)
        {
            int procResult;
            return GetProductsByChannel(channelId, out procResult);
        }

        public List<GetProductsByChannelReturnModel> GetProductsByChannel(int? channelId, out int procResult)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@channelId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetProductsByChannel] @channelId";
            var procResultData = Set<GetProductsByChannelReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetProductsByChannelReturnModel>> GetProductsByChannelAsync(int? channelId = null)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@channelId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetProductsByChannel] @channelId";
            var procResultData = await Set<GetProductsByChannelReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetReturnOrdersReturnModel> GetReturnOrders(DateTime? currentDate = null, int? filterRange = null)
        {
            int procResult;
            return GetReturnOrders(currentDate, filterRange, out procResult);
        }

        public List<GetReturnOrdersReturnModel> GetReturnOrders(DateTime? currentDate, int? filterRange, out int procResult)
        {
            var currentDateParam = new SqlParameter { ParameterName = "@currentDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = currentDate.GetValueOrDefault() };
            if (!currentDate.HasValue)
                currentDateParam.Value = DBNull.Value;

            var filterRangeParam = new SqlParameter { ParameterName = "@filterRange", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = filterRange.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!filterRange.HasValue)
                filterRangeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetReturnOrders] @currentDate, @filterRange";
            var procResultData = Set<GetReturnOrdersReturnModel>()
                .FromSqlRaw(sqlCommand, currentDateParam, filterRangeParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetReturnOrdersReturnModel>> GetReturnOrdersAsync(DateTime? currentDate = null, int? filterRange = null)
        {
            var currentDateParam = new SqlParameter { ParameterName = "@currentDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = currentDate.GetValueOrDefault() };
            if (!currentDate.HasValue)
                currentDateParam.Value = DBNull.Value;

            var filterRangeParam = new SqlParameter { ParameterName = "@filterRange", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = filterRange.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!filterRange.HasValue)
                filterRangeParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetReturnOrders] @currentDate, @filterRange";
            var procResultData = await Set<GetReturnOrdersReturnModel>()
                .FromSqlRaw(sqlCommand, currentDateParam, filterRangeParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetTotalSaleByChannelReturnModel> GetTotalSaleByChannel(DateTime? fromDate = null, DateTime? toDate = null, double? backNumber = null)
        {
            int procResult;
            return GetTotalSaleByChannel(fromDate, toDate, backNumber, out procResult);
        }

        public List<GetTotalSaleByChannelReturnModel> GetTotalSaleByChannel(DateTime? fromDate, DateTime? toDate, double? backNumber, out int procResult)
        {
            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            var backNumberParam = new SqlParameter { ParameterName = "@backNumber", SqlDbType = SqlDbType.Float, Direction = ParameterDirection.Input, Value = backNumber.GetValueOrDefault(), Precision = 53, Scale = 0 };
            if (!backNumber.HasValue)
                backNumberParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetTotalSaleByChannel] @fromDate, @toDate, @backNumber";
            var procResultData = Set<GetTotalSaleByChannelReturnModel>()
                .FromSqlRaw(sqlCommand, fromDateParam, toDateParam, backNumberParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetTotalSaleByChannelReturnModel>> GetTotalSaleByChannelAsync(DateTime? fromDate = null, DateTime? toDate = null, double? backNumber = null)
        {
            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            var backNumberParam = new SqlParameter { ParameterName = "@backNumber", SqlDbType = SqlDbType.Float, Direction = ParameterDirection.Input, Value = backNumber.GetValueOrDefault(), Precision = 53, Scale = 0 };
            if (!backNumber.HasValue)
                backNumberParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetTotalSaleByChannel] @fromDate, @toDate, @backNumber";
            var procResultData = await Set<GetTotalSaleByChannelReturnModel>()
                .FromSqlRaw(sqlCommand, fromDateParam, toDateParam, backNumberParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetTotalSaleOverviewReturnModel> GetTotalSaleOverview()
        {
            int procResult;
            return GetTotalSaleOverview(out procResult);
        }

        public List<GetTotalSaleOverviewReturnModel> GetTotalSaleOverview(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetTotalSaleOverview]";
            var procResultData = Set<GetTotalSaleOverviewReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetTotalSaleOverviewReturnModel>> GetTotalSaleOverviewAsync()
        {
            const string sqlCommand = "EXEC [dbo].[GetTotalSaleOverview]";
            var procResultData = await Set<GetTotalSaleOverviewReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Channel> Channels { get; set; } // Channel
        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<CountryVariant> CountryVariants { get; set; } // CountryVariant
        public DbSet<DatabaseVersion> DatabaseVersions { get; set; } // DatabaseVersion
        public DbSet<Feedback> Feedbacks { get; set; } // Feedback
        public DbSet<OrderDetail> OrderDetails { get; set; } // OrderDetail
        public DbSet<OrderInfo> OrderInfoes { get; set; } // OrderInfo
        public DbSet<Payment> Payments { get; set; } // Payment
        public DbSet<Product> Products { get; set; } // Product
        public DbSet<ProductChannel> ProductChannels { get; set; } // ProductChannel
        public DbSet<ProductImage> ProductImages { get; set; } // ProductImage
        public DbSet<ProductVariant> ProductVariants { get; set; } // ProductVariant
        public DbSet<ProductWarehouse> ProductWarehouses { get; set; } // ProductWarehouse
        public DbSet<Provider> Providers { get; set; } // Provider
        public DbSet<ReturnInfo> ReturnInfoes { get; set; } // ReturnInfo
        public DbSet<UserInfo> UserInfoes { get; set; } // UserInfo
        public DbSet<Variant> Variants { get; set; } // Variant
        public DbSet<Voucher> Vouchers { get; set; } // Voucher
        public DbSet<Warehouse> Warehouses { get; set; } // Warehouse

        public FakeMyDbContext()
        {
            _database = new FakeDatabaseFacade(new MyDbContext());

            Channels = new FakeDbSet<Channel>("Id");
            Countries = new FakeDbSet<Country>("Id");
            CountryVariants = new FakeDbSet<CountryVariant>("Id");
            DatabaseVersions = new FakeDbSet<DatabaseVersion>("Id");
            Feedbacks = new FakeDbSet<Feedback>("Id");
            OrderDetails = new FakeDbSet<OrderDetail>("Id");
            OrderInfoes = new FakeDbSet<OrderInfo>("Id");
            Payments = new FakeDbSet<Payment>("Id");
            Products = new FakeDbSet<Product>("Id");
            ProductChannels = new FakeDbSet<ProductChannel>("Id");
            ProductImages = new FakeDbSet<ProductImage>("Id");
            ProductVariants = new FakeDbSet<ProductVariant>("Id");
            ProductWarehouses = new FakeDbSet<ProductWarehouse>("Id");
            Providers = new FakeDbSet<Provider>("Id");
            ReturnInfoes = new FakeDbSet<ReturnInfo>("Id");
            UserInfoes = new FakeDbSet<UserInfo>("Id");
            Variants = new FakeDbSet<Variant>("Id");
            Vouchers = new FakeDbSet<Voucher>("Id");
            Warehouses = new FakeDbSet<Warehouse>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }


        // Stored Procedures

        public DbSet<GetDateToDateTotalOrderReturnModel> GetDateToDateTotalOrderReturnModel { get; set; }
        public List<GetDateToDateTotalOrderReturnModel> GetDateToDateTotalOrder(int? backNumber = null, DateTime? fromDateInput = null, DateTime? toDateInput = null)
        {
            int procResult;
            return GetDateToDateTotalOrder(backNumber, fromDateInput, toDateInput, out procResult);
        }

        public List<GetDateToDateTotalOrderReturnModel> GetDateToDateTotalOrder(int? backNumber, DateTime? fromDateInput, DateTime? toDateInput, out int procResult)
        {
            procResult = 0;
            return new List<GetDateToDateTotalOrderReturnModel>();
        }

        public Task<List<GetDateToDateTotalOrderReturnModel>> GetDateToDateTotalOrderAsync(int? backNumber = null, DateTime? fromDateInput = null, DateTime? toDateInput = null)
        {
            int procResult;
            return Task.FromResult(GetDateToDateTotalOrder(backNumber, fromDateInput, toDateInput, out procResult));
        }

        public DbSet<GetOrderByCountryReturnModel> GetOrderByCountryReturnModel { get; set; }
        public List<GetOrderByCountryReturnModel> GetOrderByCountry(DateTime? fromDate = null, DateTime? toDate = null)
        {
            int procResult;
            return GetOrderByCountry(fromDate, toDate, out procResult);
        }

        public List<GetOrderByCountryReturnModel> GetOrderByCountry(DateTime? fromDate, DateTime? toDate, out int procResult)
        {
            procResult = 0;
            return new List<GetOrderByCountryReturnModel>();
        }

        public Task<List<GetOrderByCountryReturnModel>> GetOrderByCountryAsync(DateTime? fromDate = null, DateTime? toDate = null)
        {
            int procResult;
            return Task.FromResult(GetOrderByCountry(fromDate, toDate, out procResult));
        }

        public DbSet<GetOrderByStatusReturnModel> GetOrderByStatusReturnModel { get; set; }
        public List<GetOrderByStatusReturnModel> GetOrderByStatus(DateTime? fromDate = null, DateTime? toDate = null)
        {
            int procResult;
            return GetOrderByStatus(fromDate, toDate, out procResult);
        }

        public List<GetOrderByStatusReturnModel> GetOrderByStatus(DateTime? fromDate, DateTime? toDate, out int procResult)
        {
            procResult = 0;
            return new List<GetOrderByStatusReturnModel>();
        }

        public Task<List<GetOrderByStatusReturnModel>> GetOrderByStatusAsync(DateTime? fromDate = null, DateTime? toDate = null)
        {
            int procResult;
            return Task.FromResult(GetOrderByStatus(fromDate, toDate, out procResult));
        }

        public DbSet<GetProductsByChannelReturnModel> GetProductsByChannelReturnModel { get; set; }
        public List<GetProductsByChannelReturnModel> GetProductsByChannel(int? channelId = null)
        {
            int procResult;
            return GetProductsByChannel(channelId, out procResult);
        }

        public List<GetProductsByChannelReturnModel> GetProductsByChannel(int? channelId, out int procResult)
        {
            procResult = 0;
            return new List<GetProductsByChannelReturnModel>();
        }

        public Task<List<GetProductsByChannelReturnModel>> GetProductsByChannelAsync(int? channelId = null)
        {
            int procResult;
            return Task.FromResult(GetProductsByChannel(channelId, out procResult));
        }

        public DbSet<GetReturnOrdersReturnModel> GetReturnOrdersReturnModel { get; set; }
        public List<GetReturnOrdersReturnModel> GetReturnOrders(DateTime? currentDate = null, int? filterRange = null)
        {
            int procResult;
            return GetReturnOrders(currentDate, filterRange, out procResult);
        }

        public List<GetReturnOrdersReturnModel> GetReturnOrders(DateTime? currentDate, int? filterRange, out int procResult)
        {
            procResult = 0;
            return new List<GetReturnOrdersReturnModel>();
        }

        public Task<List<GetReturnOrdersReturnModel>> GetReturnOrdersAsync(DateTime? currentDate = null, int? filterRange = null)
        {
            int procResult;
            return Task.FromResult(GetReturnOrders(currentDate, filterRange, out procResult));
        }

        public DbSet<GetTotalSaleByChannelReturnModel> GetTotalSaleByChannelReturnModel { get; set; }
        public List<GetTotalSaleByChannelReturnModel> GetTotalSaleByChannel(DateTime? fromDate = null, DateTime? toDate = null, double? backNumber = null)
        {
            int procResult;
            return GetTotalSaleByChannel(fromDate, toDate, backNumber, out procResult);
        }

        public List<GetTotalSaleByChannelReturnModel> GetTotalSaleByChannel(DateTime? fromDate, DateTime? toDate, double? backNumber, out int procResult)
        {
            procResult = 0;
            return new List<GetTotalSaleByChannelReturnModel>();
        }

        public Task<List<GetTotalSaleByChannelReturnModel>> GetTotalSaleByChannelAsync(DateTime? fromDate = null, DateTime? toDate = null, double? backNumber = null)
        {
            int procResult;
            return Task.FromResult(GetTotalSaleByChannel(fromDate, toDate, backNumber, out procResult));
        }

        public DbSet<GetTotalSaleOverviewReturnModel> GetTotalSaleOverviewReturnModel { get; set; }
        public List<GetTotalSaleOverviewReturnModel> GetTotalSaleOverview()
        {
            int procResult;
            return GetTotalSaleOverview(out procResult);
        }

        public List<GetTotalSaleOverviewReturnModel> GetTotalSaleOverview(out int procResult)
        {
            procResult = 0;
            return new List<GetTotalSaleOverviewReturnModel>();
        }

        public Task<List<GetTotalSaleOverviewReturnModel>> GetTotalSaleOverviewAsync()
        {
            int procResult;
            return Task.FromResult(GetTotalSaleOverview(out procResult));
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data  = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Channel
    public class Channel
    {
        public int Id { get; set; } // Id (Primary key)
        public string ChannelName { get; set; } // ChannelName (length: 20)
        public byte[] ChannelImage { get; set; } // ChannelImage
        public string ConfigName { get; set; } // ConfigName (length: 255)
        public string ConfigUrl { get; set; } // ConfigURL (length: 255)
        public string AccessToken { get; set; } // AccessToken
        public int? CountryId { get; set; } // CountryId
        public int? PaymentId { get; set; } // PaymentId
        public DateTime? CreatedAt { get; set; } // CreatedAt
        public int? LiveStock { get; set; } // LiveStock
        public int? DelistedStock { get; set; } // DelistedStock
        public int? OutOfStock { get; set; } // OutOfStock
        public int? LowStock { get; set; } // LowStock
        public int? OnDemand { get; set; } // OnDemand
        public DateTime? LastUpdatedAt { get; set; } // LastUpdatedAt
        public string ChannelStatus { get; set; } // ChannelStatus (length: 8)

        // Reverse navigation

        /// <summary>
        /// Child CountryVariants where [CountryVariant].[ChannelId] point to this entity (FK__CountryVa__Chann__6C190EBB)
        /// </summary>
        public ICollection<CountryVariant> CountryVariants { get; set; } // CountryVariant.FK__CountryVa__Chann__6C190EBB

        /// <summary>
        /// Child Feedbacks where [Feedback].[ChannelId] point to this entity (FK__Feedback__Channe__6477ECF3)
        /// </summary>
        public ICollection<Feedback> Feedbacks { get; set; } // Feedback.FK__Feedback__Channe__6477ECF3

        /// <summary>
        /// Child OrderInfoes where [OrderInfo].[ChannelId] point to this entity (FK__OrderInfo__Chann__656C112C)
        /// </summary>
        public ICollection<OrderInfo> OrderInfoes { get; set; } // OrderInfo.FK__OrderInfo__Chann__656C112C

        /// <summary>
        /// Child ProductChannels where [ProductChannel].[ChannelId] point to this entity (FK__ProductCh__Chann__5DCAEF64)
        /// </summary>
        public ICollection<ProductChannel> ProductChannels { get; set; } // ProductChannel.FK__ProductCh__Chann__5DCAEF64

        /// <summary>
        /// Child ProductWarehouses where [ProductWarehouse].[ChannelId] point to this entity (FK__ProductWa__Chann__70DDC3D8)
        /// </summary>
        public ICollection<ProductWarehouse> ProductWarehouses { get; set; } // ProductWarehouse.FK__ProductWa__Chann__70DDC3D8

        /// <summary>
        /// Child Vouchers where [Voucher].[ChannelId] point to this entity (FK__Voucher__Channel__628FA481)
        /// </summary>
        public ICollection<Voucher> Vouchers { get; set; } // Voucher.FK__Voucher__Channel__628FA481

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [Channel].([CountryId]) (FK__Channel__Country__60A75C0F)
        /// </summary>
        public Country Country { get; set; } // FK__Channel__Country__60A75C0F

        /// <summary>
        /// Parent Payment pointed by [Channel].([PaymentId]) (FK__Channel__Payment__619B8048)
        /// </summary>
        public Payment Payment { get; set; } // FK__Channel__Payment__619B8048

        public Channel()
        {
            CountryVariants = new List<CountryVariant>();
            Feedbacks = new List<Feedback>();
            OrderInfoes = new List<OrderInfo>();
            ProductChannels = new List<ProductChannel>();
            ProductWarehouses = new List<ProductWarehouse>();
            Vouchers = new List<Voucher>();
        }
    }

    // Country
    public class Country
    {
        public int Id { get; set; } // Id (Primary key)
        public string CountryName { get; set; } // CountryName (length: 255)
        public string ShortCode { get; set; } // ShortCode (length: 2)

        // Reverse navigation

        /// <summary>
        /// Child Channels where [Channel].[CountryId] point to this entity (FK__Channel__Country__60A75C0F)
        /// </summary>
        public ICollection<Channel> Channels { get; set; } // Channel.FK__Channel__Country__60A75C0F

        /// <summary>
        /// Child CountryVariants where [CountryVariant].[CountryId] point to this entity (FK__CountryVa__Count__6B24EA82)
        /// </summary>
        public ICollection<CountryVariant> CountryVariants { get; set; } // CountryVariant.FK__CountryVa__Count__6B24EA82

        /// <summary>
        /// Child Payments where [Payment].[CountryId] point to this entity (FK__Payment__Country__6E01572D)
        /// </summary>
        public ICollection<Payment> Payments { get; set; } // Payment.FK__Payment__Country__6E01572D

        public Country()
        {
            Channels = new List<Channel>();
            CountryVariants = new List<CountryVariant>();
            Payments = new List<Payment>();
        }
    }

    // CountryVariant
    public class CountryVariant
    {
        public int Id { get; set; } // Id (Primary key)
        public int? CountryId { get; set; } // CountryId
        public int? ChannelId { get; set; } // ChannelId
        public string Value { get; set; } // Value (length: 255)

        // Foreign keys

        /// <summary>
        /// Parent Channel pointed by [CountryVariant].([ChannelId]) (FK__CountryVa__Chann__6C190EBB)
        /// </summary>
        public Channel Channel { get; set; } // FK__CountryVa__Chann__6C190EBB

        /// <summary>
        /// Parent Country pointed by [CountryVariant].([CountryId]) (FK__CountryVa__Count__6B24EA82)
        /// </summary>
        public Country Country { get; set; } // FK__CountryVa__Count__6B24EA82
    }

    // DatabaseVersion
    public class DatabaseVersion
    {
        public int Id { get; set; } // Id (Primary key)
        public DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string VersionDetail { get; set; } // VersionDetail
        public string Version { get; set; } // Version (length: 50)
    }

    // Feedback
    public class Feedback
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ProductVariantId { get; set; } // ProductVariantId
        public string BuyerName { get; set; } // BuyerName (length: 50)
        public int? ChannelId { get; set; } // ChannelId
        public DateTime? CreatedAt { get; set; } // CreatedAt
        public string FeedbackDescription { get; set; } // FeedbackDescription (length: 255)
        public byte? Rating { get; set; } // Rating

        // Foreign keys

        /// <summary>
        /// Parent Channel pointed by [Feedback].([ChannelId]) (FK__Feedback__Channe__6477ECF3)
        /// </summary>
        public Channel Channel { get; set; } // FK__Feedback__Channe__6477ECF3

        /// <summary>
        /// Parent ProductVariant pointed by [Feedback].([ProductVariantId]) (FK__Feedback__Produc__6383C8BA)
        /// </summary>
        public ProductVariant ProductVariant { get; set; } // FK__Feedback__Produc__6383C8BA
    }

    // OrderDetail
    public class OrderDetail
    {
        public int Id { get; set; } // Id (Primary key)
        public int? OrderId { get; set; } // OrderId
        public int? ProductId { get; set; } // ProductId
        public int? ProductVariantId { get; set; } // ProductVariantId
        public int? Quantity { get; set; } // Quantity
        public double? PricePerItem { get; set; } // PricePerItem
        public double? DiscountedPrice { get; set; } // DiscountedPrice
        public string PromotionType { get; set; } // PromotionType (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent OrderInfo pointed by [OrderDetail].([OrderId]) (FK__OrderDeta__Order__5AEE82B9)
        /// </summary>
        public OrderInfo OrderInfo { get; set; } // FK__OrderDeta__Order__5AEE82B9

        /// <summary>
        /// Parent Product pointed by [OrderDetail].([ProductId]) (FK__OrderDeta__Produ__6D0D32F4)
        /// </summary>
        public Product Product { get; set; } // FK__OrderDeta__Produ__6D0D32F4

        /// <summary>
        /// Parent ProductVariant pointed by [OrderDetail].([ProductVariantId]) (FK__OrderDeta__Produ__5BE2A6F2)
        /// </summary>
        public ProductVariant ProductVariant { get; set; } // FK__OrderDeta__Produ__5BE2A6F2
    }

    // OrderInfo
    public class OrderInfo
    {
        public int Id { get; set; } // Id (Primary key)
        public DateTime? OrderedAt { get; set; } // OrderedAt
        public int? ChannelId { get; set; } // ChannelId
        public int? UserId { get; set; } // UserId
        public double? TotalPrice { get; set; } // TotalPrice
        public int? VoucherId { get; set; } // VoucherId
        public string Note { get; set; } // Note (length: 255)
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public string TaxCode { get; set; } // TaxCode (length: 20)
        public string CancelBy { get; set; } // CancelBy (length: 20)
        public string CancelReason { get; set; } // CancelReason (length: 255)
        public int? BuyerId { get; set; } // BuyerId
        public string BuyerName { get; set; } // BuyerName (length: 255)
        public string ShippingAddress { get; set; } // ShippingAddress (length: 255)
        public string RecipientName { get; set; } // RecipientName (length: 255)
        public string RecipientPhoneNumber { get; set; } // RecipientPhoneNumber (length: 255)
        public string Country { get; set; } // Country (length: 255)
        public string City { get; set; } // City (length: 255)
        public string District { get; set; } // District (length: 255)
        public string Ward { get; set; } // Ward (length: 255)
        public string ZipCode { get; set; } // ZipCode (length: 10)
        public double? ShippingServiceCost { get; set; } // ShippingServiceCost
        public double? ShippingFee { get; set; } // ShippingFee
        public string ShipmentProvider { get; set; } // ShipmentProvider (length: 255)
        public string CustomerPaymentMethod { get; set; } // CustomerPaymentMethod (length: 20)
        public string OrderStatus { get; set; } // OrderStatus (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child OrderDetails where [OrderDetail].[OrderId] point to this entity (FK__OrderDeta__Order__5AEE82B9)
        /// </summary>
        public ICollection<OrderDetail> OrderDetails { get; set; } // OrderDetail.FK__OrderDeta__Order__5AEE82B9

        /// <summary>
        /// Child ReturnInfoes where [ReturnInfo].[OrderId] point to this entity (FK__ReturnInf__Order__59063A47)
        /// </summary>
        public ICollection<ReturnInfo> ReturnInfoes { get; set; } // ReturnInfo.FK__ReturnInf__Order__59063A47

        // Foreign keys

        /// <summary>
        /// Parent Channel pointed by [OrderInfo].([ChannelId]) (FK__OrderInfo__Chann__656C112C)
        /// </summary>
        public Channel Channel { get; set; } // FK__OrderInfo__Chann__656C112C

        /// <summary>
        /// Parent UserInfo pointed by [OrderInfo].([UserId]) (FK__OrderInfo__UserI__66603565)
        /// </summary>
        public UserInfo UserInfo { get; set; } // FK__OrderInfo__UserI__66603565

        /// <summary>
        /// Parent Voucher pointed by [OrderInfo].([VoucherId]) (FK__OrderInfo__Vouch__6754599E)
        /// </summary>
        public Voucher Voucher { get; set; } // FK__OrderInfo__Vouch__6754599E

        public OrderInfo()
        {
            OrderDetails = new List<OrderDetail>();
            ReturnInfoes = new List<ReturnInfo>();
        }
    }

    // Payment
    public class Payment
    {
        public int Id { get; set; } // Id (Primary key)
        public string PaymentMethod { get; set; } // PaymentMethod (length: 255)
        public string CardHolder { get; set; } // CardHolder (length: 255)
        public string CardNumber { get; set; } // CardNumber (length: 16)
        public int? CountryId { get; set; } // CountryId
        public int? CreatedByUserId { get; set; } // CreatedByUserId
        public DateTime? CreatedAt { get; set; } // CreatedAt
        public DateTime? LastUpdatedAt { get; set; } // LastUpdatedAt

        // Reverse navigation

        /// <summary>
        /// Child Channels where [Channel].[PaymentId] point to this entity (FK__Channel__Payment__619B8048)
        /// </summary>
        public ICollection<Channel> Channels { get; set; } // Channel.FK__Channel__Payment__619B8048

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [Payment].([CountryId]) (FK__Payment__Country__6E01572D)
        /// </summary>
        public Country Country { get; set; } // FK__Payment__Country__6E01572D

        /// <summary>
        /// Parent UserInfo pointed by [Payment].([CreatedByUserId]) (FK__Payment__Created__6EF57B66)
        /// </summary>
        public UserInfo UserInfo { get; set; } // FK__Payment__Created__6EF57B66

        public Payment()
        {
            Channels = new List<Channel>();
        }
    }

    // Product
    public class Product
    {
        public int Id { get; set; } // Id (Primary key)
        public string ProductName { get; set; } // ProductName (length: 255)
        public string Barcode { get; set; } // Barcode (length: 50)
        public double? BasePrice { get; set; } // BasePrice
        public double? Cost { get; set; } // Cost
        public int? ProductHeight { get; set; } // ProductHeight
        public int? ProductWidth { get; set; } // ProductWidth
        public int? ProductLength { get; set; } // ProductLength
        public int? ProductWeight { get; set; } // ProductWeight
        public string ProductDescription { get; set; } // ProductDescription (length: 255)
        public DateTime? CreatedAt { get; set; } // CreatedAt
        public int? VoucherId { get; set; } // VoucherId
        public int? ProviderId { get; set; } // ProviderId

        // Reverse navigation

        /// <summary>
        /// Child OrderDetails where [OrderDetail].[ProductId] point to this entity (FK__OrderDeta__Produ__6D0D32F4)
        /// </summary>
        public ICollection<OrderDetail> OrderDetails { get; set; } // OrderDetail.FK__OrderDeta__Produ__6D0D32F4

        /// <summary>
        /// Child ProductImages where [ProductImage].[ProductId] point to this entity (FK__ProductIm__Produ__6A30C649)
        /// </summary>
        public ICollection<ProductImage> ProductImages { get; set; } // ProductImage.FK__ProductIm__Produ__6A30C649

        /// <summary>
        /// Child ProductVariants where [ProductVariant].[ProductId] point to this entity (FK__ProductVa__Produ__68487DD7)
        /// </summary>
        public ICollection<ProductVariant> ProductVariants { get; set; } // ProductVariant.FK__ProductVa__Produ__68487DD7

        // Foreign keys

        /// <summary>
        /// Parent Provider pointed by [Product].([ProviderId]) (FK__Product__Provide__5EBF139D)
        /// </summary>
        public Provider Provider { get; set; } // FK__Product__Provide__5EBF139D

        /// <summary>
        /// Parent Voucher pointed by [Product].([VoucherId]) (FK__Product__Voucher__5FB337D6)
        /// </summary>
        public Voucher Voucher { get; set; } // FK__Product__Voucher__5FB337D6

        public Product()
        {
            OrderDetails = new List<OrderDetail>();
            ProductImages = new List<ProductImage>();
            ProductVariants = new List<ProductVariant>();
        }
    }

    // ProductChannel
    public class ProductChannel
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ProductVariantId { get; set; } // ProductVariantId
        public int? ChannelId { get; set; } // ChannelId
        public int? Quantity { get; set; } // Quantity
        public int? MinimumThreshold { get; set; } // MinimumThreshold
        public double? Price { get; set; } // Price
        public int? Issue { get; set; } // Issue
        public int? Lost { get; set; } // Lost
        public int? InProcess { get; set; } // InProcess
        public int? Sold { get; set; } // Sold
        public string Csku { get; set; } // CSKU (length: 20)
        public bool? OnDemandRequired { get; set; } // OnDemandRequired
        public DateTime? LastUpdatedAt { get; set; } // LastUpdatedAt
        public string ProductChannelStatus { get; set; } // ProductChannelStatus (length: 8)
        public int? LastSevenDaySalesAvg { get; set; } // LastSevenDaySalesAvg
        public int? SupplierLeadTimes { get; set; } // SupplierLeadTimes

        // Foreign keys

        /// <summary>
        /// Parent Channel pointed by [ProductChannel].([ChannelId]) (FK__ProductCh__Chann__5DCAEF64)
        /// </summary>
        public Channel Channel { get; set; } // FK__ProductCh__Chann__5DCAEF64

        /// <summary>
        /// Parent ProductVariant pointed by [ProductChannel].([ProductVariantId]) (FK__ProductCh__Produ__5CD6CB2B)
        /// </summary>
        public ProductVariant ProductVariant { get; set; } // FK__ProductCh__Produ__5CD6CB2B
    }

    // ProductImage
    public class ProductImage
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ProductId { get; set; } // ProductId
        public byte[] ProductImage_ { get; set; } // ProductImage
        public string ImageDescription { get; set; } // ImageDescription (length: 255)

        // Foreign keys

        /// <summary>
        /// Parent Product pointed by [ProductImage].([ProductId]) (FK__ProductIm__Produ__6A30C649)
        /// </summary>
        public Product Product { get; set; } // FK__ProductIm__Produ__6A30C649
    }

    // ProductVariant
    public class ProductVariant
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ProductId { get; set; } // ProductId
        public int? VariantId { get; set; } // VariantId
        public string ProductVariantValue { get; set; } // ProductVariantValue (length: 255)
        public string Sku { get; set; } // SKU (length: 20)
        public byte[] ProductVariantImage { get; set; } // ProductVariantImage

        // Reverse navigation

        /// <summary>
        /// Child Feedbacks where [Feedback].[ProductVariantId] point to this entity (FK__Feedback__Produc__6383C8BA)
        /// </summary>
        public ICollection<Feedback> Feedbacks { get; set; } // Feedback.FK__Feedback__Produc__6383C8BA

        /// <summary>
        /// Child OrderDetails where [OrderDetail].[ProductVariantId] point to this entity (FK__OrderDeta__Produ__5BE2A6F2)
        /// </summary>
        public ICollection<OrderDetail> OrderDetails { get; set; } // OrderDetail.FK__OrderDeta__Produ__5BE2A6F2

        /// <summary>
        /// Child ProductChannels where [ProductChannel].[ProductVariantId] point to this entity (FK__ProductCh__Produ__5CD6CB2B)
        /// </summary>
        public ICollection<ProductChannel> ProductChannels { get; set; } // ProductChannel.FK__ProductCh__Produ__5CD6CB2B

        /// <summary>
        /// Child ProductWarehouses where [ProductWarehouse].[ProductVariantId] point to this entity (FK__ProductWa__Produ__71D1E811)
        /// </summary>
        public ICollection<ProductWarehouse> ProductWarehouses { get; set; } // ProductWarehouse.FK__ProductWa__Produ__71D1E811

        // Foreign keys

        /// <summary>
        /// Parent Product pointed by [ProductVariant].([ProductId]) (FK__ProductVa__Produ__68487DD7)
        /// </summary>
        public Product Product { get; set; } // FK__ProductVa__Produ__68487DD7

        /// <summary>
        /// Parent Variant pointed by [ProductVariant].([VariantId]) (FK__ProductVa__Varia__693CA210)
        /// </summary>
        public Variant Variant { get; set; } // FK__ProductVa__Varia__693CA210

        public ProductVariant()
        {
            Feedbacks = new List<Feedback>();
            OrderDetails = new List<OrderDetail>();
            ProductChannels = new List<ProductChannel>();
            ProductWarehouses = new List<ProductWarehouse>();
        }
    }

    // ProductWarehouse
    public class ProductWarehouse
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ProductVariantId { get; set; } // ProductVariantId
        public int? ChannelId { get; set; } // ChannelId
        public int? WarehouseId { get; set; } // WarehouseId
        public int? Quantity { get; set; } // Quantity

        // Foreign keys

        /// <summary>
        /// Parent Channel pointed by [ProductWarehouse].([ChannelId]) (FK__ProductWa__Chann__70DDC3D8)
        /// </summary>
        public Channel Channel { get; set; } // FK__ProductWa__Chann__70DDC3D8

        /// <summary>
        /// Parent ProductVariant pointed by [ProductWarehouse].([ProductVariantId]) (FK__ProductWa__Produ__71D1E811)
        /// </summary>
        public ProductVariant ProductVariant { get; set; } // FK__ProductWa__Produ__71D1E811

        /// <summary>
        /// Parent Warehouse pointed by [ProductWarehouse].([WarehouseId]) (FK__ProductWa__Wareh__6FE99F9F)
        /// </summary>
        public Warehouse Warehouse { get; set; } // FK__ProductWa__Wareh__6FE99F9F
    }

    // Provider
    public class Provider
    {
        public int Id { get; set; } // Id (Primary key)
        public string ProviderName { get; set; } // ProviderName (length: 255)
        public string FullAddress { get; set; } // FullAddress (length: 255)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 15)
        public string Email { get; set; } // Email (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child Products where [Product].[ProviderId] point to this entity (FK__Product__Provide__5EBF139D)
        /// </summary>
        public ICollection<Product> Products { get; set; } // Product.FK__Product__Provide__5EBF139D

        public Provider()
        {
            Products = new List<Product>();
        }
    }

    // ReturnInfo
    public class ReturnInfo
    {
        public int Id { get; set; } // Id (Primary key)
        public int? OrderId { get; set; } // OrderId
        public DateTime? ReturnedAt { get; set; } // ReturnedAt
        public string Reason { get; set; } // Reason (length: 255)
        public int? UpdatedByUserId { get; set; } // UpdatedByUserId
        public DateTime? LastUpdatedAt { get; set; } // LastUpdatedAt
        public string ReturnStatus { get; set; } // ReturnStatus (length: 9)

        // Foreign keys

        /// <summary>
        /// Parent OrderInfo pointed by [ReturnInfo].([OrderId]) (FK__ReturnInf__Order__59063A47)
        /// </summary>
        public OrderInfo OrderInfo { get; set; } // FK__ReturnInf__Order__59063A47

        /// <summary>
        /// Parent UserInfo pointed by [ReturnInfo].([UpdatedByUserId]) (FK__ReturnInf__Updat__59FA5E80)
        /// </summary>
        public UserInfo UserInfo { get; set; } // FK__ReturnInf__Updat__59FA5E80
    }

    // UserInfo
    public class UserInfo
    {
        public int Id { get; set; } // Id (Primary key)
        public string FullName { get; set; } // FullName (length: 255)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 15)
        public DateTime? Dob { get; set; } // DOB
        public string Gender { get; set; } // GENDER (length: 20)
        public string Email { get; set; } // Email (length: 50)
        public string UserRole { get; set; } // UserRole (length: 7)
        public string FullAddress { get; set; } // FullAddress (length: 255)
        public string UserStatus { get; set; } // UserStatus (length: 8)
        public string Facebook { get; set; } // Facebook (length: 255)
        public string Instagram { get; set; } // Instagram (length: 255)
        public string UserName { get; set; } // UserName (length: 16)
        public string UserPassword { get; set; } // UserPassword (length: 255)
        public byte[] Avatar { get; set; } // Avatar

        // Reverse navigation

        /// <summary>
        /// Child OrderInfoes where [OrderInfo].[UserId] point to this entity (FK__OrderInfo__UserI__66603565)
        /// </summary>
        public ICollection<OrderInfo> OrderInfoes { get; set; } // OrderInfo.FK__OrderInfo__UserI__66603565

        /// <summary>
        /// Child Payments where [Payment].[CreatedByUserId] point to this entity (FK__Payment__Created__6EF57B66)
        /// </summary>
        public ICollection<Payment> Payments { get; set; } // Payment.FK__Payment__Created__6EF57B66

        /// <summary>
        /// Child ReturnInfoes where [ReturnInfo].[UpdatedByUserId] point to this entity (FK__ReturnInf__Updat__59FA5E80)
        /// </summary>
        public ICollection<ReturnInfo> ReturnInfoes { get; set; } // ReturnInfo.FK__ReturnInf__Updat__59FA5E80

        public UserInfo()
        {
            OrderInfoes = new List<OrderInfo>();
            Payments = new List<Payment>();
            ReturnInfoes = new List<ReturnInfo>();
        }
    }

    // Variant
    public class Variant
    {
        public int Id { get; set; } // Id (Primary key)
        public string VariantName { get; set; } // VariantName (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child ProductVariants where [ProductVariant].[VariantId] point to this entity (FK__ProductVa__Varia__693CA210)
        /// </summary>
        public ICollection<ProductVariant> ProductVariants { get; set; } // ProductVariant.FK__ProductVa__Varia__693CA210

        public Variant()
        {
            ProductVariants = new List<ProductVariant>();
        }
    }

    // Voucher
    public class Voucher
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ChannelId { get; set; } // ChannelId
        public string VoucherName { get; set; } // VoucherName (length: 255)
        public string VoucherCode { get; set; } // VoucherCode (length: 20)
        public string VoucherType { get; set; } // VoucherType (length: 20)
        public string Apply { get; set; } // Apply (length: 17)
        public string VoucherDiscountType { get; set; } // VoucherDiscountType (length: 20)
        public int? LimitPerCustomer { get; set; } // LimitPerCustomer
        public DateTime? PeriodStartTime { get; set; } // PeriodStartTime
        public DateTime? PeriodEndTime { get; set; } // PeriodEndTime
        public double? OrderUsedBudget { get; set; } // OrderUsedBudget
        public DateTime? CollectStartAt { get; set; } // CollectStartAt
        public double? OfferingMoneyValueOff { get; set; } // OfferingMoneyValueOff
        public int? MaxDiscountOfferingValueOff { get; set; } // MaxDiscountOfferingValueOff
        public int CriteriaOverMoney { get; set; } // CriteriaOverMoney
        public string VoucherStatus { get; set; } // VoucherStatus (length: 9)

        // Reverse navigation

        /// <summary>
        /// Child OrderInfoes where [OrderInfo].[VoucherId] point to this entity (FK__OrderInfo__Vouch__6754599E)
        /// </summary>
        public ICollection<OrderInfo> OrderInfoes { get; set; } // OrderInfo.FK__OrderInfo__Vouch__6754599E

        /// <summary>
        /// Child Products where [Product].[VoucherId] point to this entity (FK__Product__Voucher__5FB337D6)
        /// </summary>
        public ICollection<Product> Products { get; set; } // Product.FK__Product__Voucher__5FB337D6

        // Foreign keys

        /// <summary>
        /// Parent Channel pointed by [Voucher].([ChannelId]) (FK__Voucher__Channel__628FA481)
        /// </summary>
        public Channel Channel { get; set; } // FK__Voucher__Channel__628FA481

        public Voucher()
        {
            OrderInfoes = new List<OrderInfo>();
            Products = new List<Product>();
        }
    }

    // Warehouse
    public class Warehouse
    {
        public int Id { get; set; } // Id (Primary key)
        public string FullAddress { get; set; } // FullAddress (length: 255)
        public string WarehouseName { get; set; } // WarehouseName (length: 255)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 15)
        public DateTime? CreatedAt { get; set; } // CreatedAt
        public DateTime? LastUpdatedAt { get; set; } // LastUpdatedAt

        // Reverse navigation

        /// <summary>
        /// Child ProductWarehouses where [ProductWarehouse].[WarehouseId] point to this entity (FK__ProductWa__Wareh__6FE99F9F)
        /// </summary>
        public ICollection<ProductWarehouse> ProductWarehouses { get; set; } // ProductWarehouse.FK__ProductWa__Wareh__6FE99F9F

        public Warehouse()
        {
            ProductWarehouses = new List<ProductWarehouse>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Channel
    public class ChannelConfiguration : IEntityTypeConfiguration<Channel>
    {
        public void Configure(EntityTypeBuilder<Channel> builder)
        {
            builder.ToTable("Channel", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Channel__3214EC07BDCC92FB").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ChannelName).HasColumnName(@"ChannelName").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ChannelImage).HasColumnName(@"ChannelImage").HasColumnType("varbinary(max)").IsRequired(false);
            builder.Property(x => x.ConfigName).HasColumnName(@"ConfigName").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.ConfigUrl).HasColumnName(@"ConfigURL").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.AccessToken).HasColumnName(@"AccessToken").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.CountryId).HasColumnName(@"CountryId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PaymentId).HasColumnName(@"PaymentId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LiveStock).HasColumnName(@"LiveStock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DelistedStock).HasColumnName(@"DelistedStock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutOfStock).HasColumnName(@"OutOfStock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LowStock).HasColumnName(@"LowStock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OnDemand).HasColumnName(@"OnDemand").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LastUpdatedAt).HasColumnName(@"LastUpdatedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ChannelStatus).HasColumnName(@"ChannelStatus").HasColumnType("varchar(8)").IsRequired(false).IsUnicode(false).HasMaxLength(8);

            // Foreign keys
            builder.HasOne(a => a.Country).WithMany(b => b.Channels).HasForeignKey(c => c.CountryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Channel__Country__60A75C0F");
            builder.HasOne(a => a.Payment).WithMany(b => b.Channels).HasForeignKey(c => c.PaymentId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Channel__Payment__619B8048");
        }
    }

    // Country
    public class CountryConfiguration : IEntityTypeConfiguration<Country>
    {
        public void Configure(EntityTypeBuilder<Country> builder)
        {
            builder.ToTable("Country", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Country__3214EC07CAA15BAD").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CountryName).HasColumnName(@"CountryName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ShortCode).HasColumnName(@"ShortCode").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
        }
    }

    // CountryVariant
    public class CountryVariantConfiguration : IEntityTypeConfiguration<CountryVariant>
    {
        public void Configure(EntityTypeBuilder<CountryVariant> builder)
        {
            builder.ToTable("CountryVariant", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__CountryV__3214EC07588807DD").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CountryId).HasColumnName(@"CountryId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ChannelId).HasColumnName(@"ChannelId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);

            // Foreign keys
            builder.HasOne(a => a.Channel).WithMany(b => b.CountryVariants).HasForeignKey(c => c.ChannelId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__CountryVa__Chann__6C190EBB");
            builder.HasOne(a => a.Country).WithMany(b => b.CountryVariants).HasForeignKey(c => c.CountryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__CountryVa__Count__6B24EA82");
        }
    }

    // DatabaseVersion
    public class DatabaseVersionConfiguration : IEntityTypeConfiguration<DatabaseVersion>
    {
        public void Configure(EntityTypeBuilder<DatabaseVersion> builder)
        {
            builder.ToTable("DatabaseVersion", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Database__3214EC07FD27B654").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.VersionDetail).HasColumnName(@"VersionDetail").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Version).HasColumnName(@"Version").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // Feedback
    public class FeedbackConfiguration : IEntityTypeConfiguration<Feedback>
    {
        public void Configure(EntityTypeBuilder<Feedback> builder)
        {
            builder.ToTable("Feedback", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Feedback__3214EC07BB22970E").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductVariantId).HasColumnName(@"ProductVariantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BuyerName).HasColumnName(@"BuyerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ChannelId).HasColumnName(@"ChannelId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.FeedbackDescription).HasColumnName(@"FeedbackDescription").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Rating).HasColumnName(@"Rating").HasColumnType("tinyint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Channel).WithMany(b => b.Feedbacks).HasForeignKey(c => c.ChannelId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Feedback__Channe__6477ECF3");
            builder.HasOne(a => a.ProductVariant).WithMany(b => b.Feedbacks).HasForeignKey(c => c.ProductVariantId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Feedback__Produc__6383C8BA");
        }
    }

    // OrderDetail
    public class OrderDetailConfiguration : IEntityTypeConfiguration<OrderDetail>
    {
        public void Configure(EntityTypeBuilder<OrderDetail> builder)
        {
            builder.ToTable("OrderDetail", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__OrderDet__3214EC07C3F99206").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductVariantId).HasColumnName(@"ProductVariantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PricePerItem).HasColumnName(@"PricePerItem").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.DiscountedPrice).HasColumnName(@"DiscountedPrice").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.PromotionType).HasColumnName(@"PromotionType").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.OrderInfo).WithMany(b => b.OrderDetails).HasForeignKey(c => c.OrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderDeta__Order__5AEE82B9");
            builder.HasOne(a => a.Product).WithMany(b => b.OrderDetails).HasForeignKey(c => c.ProductId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderDeta__Produ__6D0D32F4");
            builder.HasOne(a => a.ProductVariant).WithMany(b => b.OrderDetails).HasForeignKey(c => c.ProductVariantId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderDeta__Produ__5BE2A6F2");
        }
    }

    // OrderInfo
    public class OrderInfoConfiguration : IEntityTypeConfiguration<OrderInfo>
    {
        public void Configure(EntityTypeBuilder<OrderInfo> builder)
        {
            builder.ToTable("OrderInfo", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__OrderInf__3214EC07DA323048").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderedAt).HasColumnName(@"OrderedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ChannelId).HasColumnName(@"ChannelId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalPrice).HasColumnName(@"TotalPrice").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.VoucherId).HasColumnName(@"VoucherId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Note).HasColumnName(@"Note").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.TaxCode).HasColumnName(@"TaxCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CancelBy).HasColumnName(@"CancelBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CancelReason).HasColumnName(@"CancelReason").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.BuyerId).HasColumnName(@"BuyerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BuyerName).HasColumnName(@"BuyerName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ShippingAddress).HasColumnName(@"ShippingAddress").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RecipientName).HasColumnName(@"RecipientName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.RecipientPhoneNumber).HasColumnName(@"RecipientPhoneNumber").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.District).HasColumnName(@"District").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Ward).HasColumnName(@"Ward").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ZipCode).HasColumnName(@"ZipCode").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ShippingServiceCost).HasColumnName(@"ShippingServiceCost").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.ShippingFee).HasColumnName(@"ShippingFee").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.ShipmentProvider).HasColumnName(@"ShipmentProvider").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerPaymentMethod).HasColumnName(@"CustomerPaymentMethod").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.OrderStatus).HasColumnName(@"OrderStatus").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);

            // Foreign keys
            builder.HasOne(a => a.Channel).WithMany(b => b.OrderInfoes).HasForeignKey(c => c.ChannelId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderInfo__Chann__656C112C");
            builder.HasOne(a => a.UserInfo).WithMany(b => b.OrderInfoes).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderInfo__UserI__66603565");
            builder.HasOne(a => a.Voucher).WithMany(b => b.OrderInfoes).HasForeignKey(c => c.VoucherId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderInfo__Vouch__6754599E");
        }
    }

    // Payment
    public class PaymentConfiguration : IEntityTypeConfiguration<Payment>
    {
        public void Configure(EntityTypeBuilder<Payment> builder)
        {
            builder.ToTable("Payment", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Payment__3214EC07D3EB01D9").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PaymentMethod).HasColumnName(@"PaymentMethod").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CardHolder).HasColumnName(@"CardHolder").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CardNumber).HasColumnName(@"CardNumber").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.CountryId).HasColumnName(@"CountryId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedByUserId).HasColumnName(@"CreatedByUserId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LastUpdatedAt).HasColumnName(@"LastUpdatedAt").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Country).WithMany(b => b.Payments).HasForeignKey(c => c.CountryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Payment__Country__6E01572D");
            builder.HasOne(a => a.UserInfo).WithMany(b => b.Payments).HasForeignKey(c => c.CreatedByUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Payment__Created__6EF57B66");
        }
    }

    // Product
    public class ProductConfiguration : IEntityTypeConfiguration<Product>
    {
        public void Configure(EntityTypeBuilder<Product> builder)
        {
            builder.ToTable("Product", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Product__3214EC072CB07E6C").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Barcode).HasColumnName(@"Barcode").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.BasePrice).HasColumnName(@"BasePrice").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.ProductHeight).HasColumnName(@"ProductHeight").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductWidth).HasColumnName(@"ProductWidth").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductLength).HasColumnName(@"ProductLength").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductWeight).HasColumnName(@"ProductWeight").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductDescription).HasColumnName(@"ProductDescription").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.VoucherId).HasColumnName(@"VoucherId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProviderId).HasColumnName(@"ProviderId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Provider).WithMany(b => b.Products).HasForeignKey(c => c.ProviderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Product__Provide__5EBF139D");
            builder.HasOne(a => a.Voucher).WithMany(b => b.Products).HasForeignKey(c => c.VoucherId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Product__Voucher__5FB337D6");
        }
    }

    // ProductChannel
    public class ProductChannelConfiguration : IEntityTypeConfiguration<ProductChannel>
    {
        public void Configure(EntityTypeBuilder<ProductChannel> builder)
        {
            builder.ToTable("ProductChannel", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ProductC__3214EC073924D30F").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductVariantId).HasColumnName(@"ProductVariantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ChannelId).HasColumnName(@"ChannelId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MinimumThreshold).HasColumnName(@"MinimumThreshold").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.Issue).HasColumnName(@"Issue").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Lost).HasColumnName(@"Lost").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InProcess).HasColumnName(@"InProcess").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Sold).HasColumnName(@"Sold").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Csku).HasColumnName(@"CSKU").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.OnDemandRequired).HasColumnName(@"OnDemandRequired").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LastUpdatedAt).HasColumnName(@"LastUpdatedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ProductChannelStatus).HasColumnName(@"ProductChannelStatus").HasColumnType("varchar(8)").IsRequired(false).IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.LastSevenDaySalesAvg).HasColumnName(@"LastSevenDaySalesAvg").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SupplierLeadTimes).HasColumnName(@"SupplierLeadTimes").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Channel).WithMany(b => b.ProductChannels).HasForeignKey(c => c.ChannelId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ProductCh__Chann__5DCAEF64");
            builder.HasOne(a => a.ProductVariant).WithMany(b => b.ProductChannels).HasForeignKey(c => c.ProductVariantId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ProductCh__Produ__5CD6CB2B");
        }
    }

    // ProductImage
    public class ProductImageConfiguration : IEntityTypeConfiguration<ProductImage>
    {
        public void Configure(EntityTypeBuilder<ProductImage> builder)
        {
            builder.ToTable("ProductImage", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ProductI__3214EC07D198B42F").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductImage_).HasColumnName(@"ProductImage").HasColumnType("varbinary(max)").IsRequired(false);
            builder.Property(x => x.ImageDescription).HasColumnName(@"ImageDescription").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);

            // Foreign keys
            builder.HasOne(a => a.Product).WithMany(b => b.ProductImages).HasForeignKey(c => c.ProductId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ProductIm__Produ__6A30C649");
        }
    }

    // ProductVariant
    public class ProductVariantConfiguration : IEntityTypeConfiguration<ProductVariant>
    {
        public void Configure(EntityTypeBuilder<ProductVariant> builder)
        {
            builder.ToTable("ProductVariant", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ProductV__3214EC07E1AFE5EC").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.VariantId).HasColumnName(@"VariantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductVariantValue).HasColumnName(@"ProductVariantValue").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Sku).HasColumnName(@"SKU").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ProductVariantImage).HasColumnName(@"ProductVariantImage").HasColumnType("varbinary(max)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Product).WithMany(b => b.ProductVariants).HasForeignKey(c => c.ProductId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ProductVa__Produ__68487DD7");
            builder.HasOne(a => a.Variant).WithMany(b => b.ProductVariants).HasForeignKey(c => c.VariantId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ProductVa__Varia__693CA210");
        }
    }

    // ProductWarehouse
    public class ProductWarehouseConfiguration : IEntityTypeConfiguration<ProductWarehouse>
    {
        public void Configure(EntityTypeBuilder<ProductWarehouse> builder)
        {
            builder.ToTable("ProductWarehouse", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ProductW__3214EC077B3C34F2").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductVariantId).HasColumnName(@"ProductVariantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ChannelId).HasColumnName(@"ChannelId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WarehouseId).HasColumnName(@"WarehouseId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Channel).WithMany(b => b.ProductWarehouses).HasForeignKey(c => c.ChannelId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ProductWa__Chann__70DDC3D8");
            builder.HasOne(a => a.ProductVariant).WithMany(b => b.ProductWarehouses).HasForeignKey(c => c.ProductVariantId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ProductWa__Produ__71D1E811");
            builder.HasOne(a => a.Warehouse).WithMany(b => b.ProductWarehouses).HasForeignKey(c => c.WarehouseId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ProductWa__Wareh__6FE99F9F");
        }
    }

    // Provider
    public class ProviderConfiguration : IEntityTypeConfiguration<Provider>
    {
        public void Configure(EntityTypeBuilder<Provider> builder)
        {
            builder.ToTable("Provider", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Provider__3214EC072F695F3D").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProviderName).HasColumnName(@"ProviderName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.FullAddress).HasColumnName(@"FullAddress").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
        }
    }

    // ReturnInfo
    public class ReturnInfoConfiguration : IEntityTypeConfiguration<ReturnInfo>
    {
        public void Configure(EntityTypeBuilder<ReturnInfo> builder)
        {
            builder.ToTable("ReturnInfo", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ReturnIn__3214EC0754D4D660").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReturnedAt).HasColumnName(@"ReturnedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.UpdatedByUserId).HasColumnName(@"UpdatedByUserId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LastUpdatedAt).HasColumnName(@"LastUpdatedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReturnStatus).HasColumnName(@"ReturnStatus").HasColumnType("varchar(9)").IsRequired(false).IsUnicode(false).HasMaxLength(9);

            // Foreign keys
            builder.HasOne(a => a.OrderInfo).WithMany(b => b.ReturnInfoes).HasForeignKey(c => c.OrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ReturnInf__Order__59063A47");
            builder.HasOne(a => a.UserInfo).WithMany(b => b.ReturnInfoes).HasForeignKey(c => c.UpdatedByUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ReturnInf__Updat__59FA5E80");
        }
    }

    // UserInfo
    public class UserInfoConfiguration : IEntityTypeConfiguration<UserInfo>
    {
        public void Configure(EntityTypeBuilder<UserInfo> builder)
        {
            builder.ToTable("UserInfo", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__UserInfo__3214EC07F573FC38").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Dob).HasColumnName(@"DOB").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.Gender).HasColumnName(@"GENDER").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.UserRole).HasColumnName(@"UserRole").HasColumnType("varchar(7)").IsRequired(false).IsUnicode(false).HasMaxLength(7);
            builder.Property(x => x.FullAddress).HasColumnName(@"FullAddress").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.UserStatus).HasColumnName(@"UserStatus").HasColumnType("varchar(8)").IsRequired(false).IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.Facebook).HasColumnName(@"Facebook").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Instagram).HasColumnName(@"Instagram").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("varchar(16)").IsRequired().IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.UserPassword).HasColumnName(@"UserPassword").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Avatar).HasColumnName(@"Avatar").HasColumnType("varbinary(max)").IsRequired(false);

            builder.HasIndex(x => x.UserName).HasDatabaseName("UQ__UserInfo__C9F284564D231302").IsUnique();
        }
    }

    // Variant
    public class VariantConfiguration : IEntityTypeConfiguration<Variant>
    {
        public void Configure(EntityTypeBuilder<Variant> builder)
        {
            builder.ToTable("Variant", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Variant__3214EC07C7D78594").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.VariantName).HasColumnName(@"VariantName").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
        }
    }

    // Voucher
    public class VoucherConfiguration : IEntityTypeConfiguration<Voucher>
    {
        public void Configure(EntityTypeBuilder<Voucher> builder)
        {
            builder.ToTable("Voucher", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Voucher__3214EC07AACB1D4D").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ChannelId).HasColumnName(@"ChannelId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.VoucherName).HasColumnName(@"VoucherName").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.VoucherCode).HasColumnName(@"VoucherCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.VoucherType).HasColumnName(@"VoucherType").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Apply).HasColumnName(@"Apply").HasColumnType("varchar(17)").IsRequired(false).IsUnicode(false).HasMaxLength(17);
            builder.Property(x => x.VoucherDiscountType).HasColumnName(@"VoucherDiscountType").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.LimitPerCustomer).HasColumnName(@"LimitPerCustomer").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PeriodStartTime).HasColumnName(@"PeriodStartTime").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.PeriodEndTime).HasColumnName(@"PeriodEndTime").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.OrderUsedBudget).HasColumnName(@"OrderUsedBudget").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.CollectStartAt).HasColumnName(@"CollectStartAt").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.OfferingMoneyValueOff).HasColumnName(@"OfferingMoneyValueOff").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.MaxDiscountOfferingValueOff).HasColumnName(@"MaxDiscountOfferingValueOff").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CriteriaOverMoney).HasColumnName(@"CriteriaOverMoney").HasColumnType("int").IsRequired();
            builder.Property(x => x.VoucherStatus).HasColumnName(@"VoucherStatus").HasColumnType("varchar(9)").IsRequired(false).IsUnicode(false).HasMaxLength(9);

            // Foreign keys
            builder.HasOne(a => a.Channel).WithMany(b => b.Vouchers).HasForeignKey(c => c.ChannelId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Voucher__Channel__628FA481");
        }
    }

    // Warehouse
    public class WarehouseConfiguration : IEntityTypeConfiguration<Warehouse>
    {
        public void Configure(EntityTypeBuilder<Warehouse> builder)
        {
            builder.ToTable("Warehouse", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Warehous__3214EC07C360FCE5").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FullAddress).HasColumnName(@"FullAddress").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.WarehouseName).HasColumnName(@"WarehouseName").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LastUpdatedAt).HasColumnName(@"LastUpdatedAt").HasColumnType("datetime").IsRequired(false);
        }
    }


    #endregion

    #region Stored procedure return models

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class GetDateToDateTotalOrderReturnModel
    {
        public int? HourNumber { get; set; }
        public int? DayNumber { get; set; }
        public int? MonthNumber { get; set; }
        public int? YearNumber { get; set; }
        public int? Total { get; set; }
    }

    public class GetOrderByCountryReturnModel
    {
        public string Country { get; set; }
        public int? NumberOfOrders { get; set; }
        public double? TotalSales { get; set; }
    }

    public class GetOrderByStatusReturnModel
    {
        public DateTime? OrderedDate { get; set; }
        public int? NumberOfCompleted { get; set; }
        public int? NumberOfFailed { get; set; }
        public int? NumberOfReturn { get; set; }
        public int? NumberOfOrder { get; set; }
    }

    public class GetProductsByChannelReturnModel
    {
        public int Id { get; set; }
        public byte[] ProductVariantImage { get; set; }
        public string SKU { get; set; }
        public string ProductName { get; set; }
        public string ProductVariantValue { get; set; }
        public int? AvailableStock { get; set; }
        public int? Inprocess { get; set; }
        public int? Sold { get; set; }
    }

    public class GetReturnOrdersReturnModel
    {
        public int? TotalReturnOrders { get; set; }
    }

    public class GetTotalSaleByChannelReturnModel
    {
        public int Id { get; set; }
        public string ChannelName { get; set; }
        public double? Total { get; set; }
        public double? Percentages { get; set; }
    }

    public class GetTotalSaleOverviewReturnModel
    {
        public double? CurrentValue { get; set; }
        public double? GrowthRate { get; set; }
    }


    #endregion

}
// </auto-generated>
